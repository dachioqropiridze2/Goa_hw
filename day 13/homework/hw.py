# 1) კომენტარის სახით ახსენით, თუ რა დანიშნულება აქვს სიებს (lists) პითონში, დეტალურად განიხილეთ list-ების სინტაქსი და ახსენით თუ როგორ მუშაობს ინდექსინგი.

# სიები (lists) პითონში გამოიყენება მონაცემების ერთობლიობის შესანახად, რომელთა ელემენტებს შეიძლება ჰქონდეთ სხვადასხვა ტიპი (სრულ რიცხვი, სტრინგი, ლოგიკური მნიშვნელობა და ა.შ.).
# სიების სინტაქსი არის: სიაში ელემენტების ჩასმა ხდება კუთხურული ფრჩხილებით [ ].
# ინდექსირება ხდება ცვლადის მიერ მისი ელემენტების მისაღებად 0-იდან დაწყებული, რაც იმას ნიშნავს, რომ პირველი ელემენტი სიაში აქვს ინდექსი 0, მეორე - 1 და ასე შემდეგ.
# სიაში ასევე შეიძლება გამოიყენოთ უარყოფითი ინდექსები, რომლებიც იწყება -1-დან და უკუსვლით ითვლება: -1 არის ბოლო ელემენტი, -2 - ბოლო მეორე და ა.შ.

# მაგალითი:
my_list = [1, 2, 3, "apple", True]  
# ინდექსით: my_list[0] არის 1, my_list[3] არის "apple"
# უარყოფითი ინდექსით: my_list[-1] არის True, my_list[-2] არის "apple"


# 2) შექმენით სია, სადაც შეინახავთ ჯანსაღ საკვებ პროდუქტებს. შემდეგ კი ტერმინალში დაბეჭდეთ ეს სია.

healthy_foods = ["apple", "banana", "carrot", "spinach", "almonds"]
print(healthy_foods)


# 3) შექმენით სია, სადაც შეინახავთ თქვენი საყვარელი მანქანის მოდელებს. დაბეჭდეთ ამ სიის მესამე ელემენტი.

car_models = ["Tesla Model S", "BMW X5", "Audi A6", "Mercedes-Benz C-Class"]
print(car_models[2])  # მესამე ელემენტი


# 4) შექმენით რიცხვების სია და შეინახეთ 10+ ელემენტი. შემდეგ დაბეჭდეთ ამ სიის ბოლო ელემენტი უარყოფითი ინდექსინგის გამოყენებით.

numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
print(numbers[-1])  # ბოლო ელემენტი


# 5) შექმენით სია და მასში შეინახეთ 5 ფილმის სახელწოდება. დაბეჭდეთ ამ სიის მეორე და მეოთხე ინდექსზე მდგომი ელემენტები. (slicing-ის გამოყენების გარეშე).

movies = ["Inception", "Titanic", "The Dark Knight", "Avatar", "The Matrix"]
print(movies[1])  # მეორე ინდექსი
print(movies[3])  # მეოთხე ინდექსი


# 6) მომხმარებელს შემოატანინეთ რიცხვი და დაწერეთ პროგრამა, რომელიც შეამოწმებს ეს რიცხვი მარტივია თუ არა. (მარტივია რიცხვი, თუ მას მხოლოდ ორი გამყოფი აქვს).

num = int(input("შეიყვანეთ რიცხვი: "))
is_prime = True

if num > 1:
    for i in range(2, num):
        if num % i == 0:
            is_prime = False
            break
else:
    is_prime = False

if is_prime:
    print(f"{num} არის მარტივი რიცხვი.")
else:
    print(f"{num} არ არის მარტივი რიცხვი.")